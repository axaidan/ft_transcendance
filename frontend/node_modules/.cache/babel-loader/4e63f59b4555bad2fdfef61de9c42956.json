{"ast":null,"code":"var _jsxFileName = \"/front/src/componants/Friendsbar.tsx\",\n    _s = $RefreshSig$();\n\n// Extern:\nimport React from 'react';\nimport { useEffect, useState } from \"react\";\n// Intern:\nimport { AxiosJwt } from \"../hooks\";\n// Assets:\nimport '../styles/components/Friendsbar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Friendsbar(_ref) {\n  _s();\n\n  let {\n    userId,\n    socket\n  } = _ref;\n  const [friends, setFriends] = useState([]); // const [connectFriends, setConnectFriends] = useState<IUser[]>([])\n\n  const axios = AxiosJwt();\n  useEffect(() => {\n    axios.get('/relation/list_friend').then(res => {\n      setFriends(res.data);\n    });\n  }, []); // useEffect(() => {\n  // \tconst connectedListener = (connectId: number) => {\n  // \t\tconst isFriend = friends.find(user => {\n  // \t\t\treturn (user.id === connectId);\n  // \t\t})\n  // \t\tsetConnectFriends(current => [...current, isFriend!]);\n  // \t}\n  // \tconst disconnectedListener = (disconnectId: number) => {\n  // \t\tconst isFriend = friends.find(user => {\n  // \t\t\treturn (user.id === disconnectId);\n  // \t\t})\n  // \t\tsetConnectFriends((prevMessages) => {\n  // \t\t\tconst newMessages = { ...prevMessages };\n  // \t\t\tdelete newMessages[isFriend!.id];\n  // \t\t\treturn newMessages;\n  // \t\t});\n  // \t};\n  // \tsocket.on('loginToClient', (connectId: number) => {\n  // \t\tconst isFriend = friends.find(user => {\n  // \t\t\treturn (user.id === connectId);\n  // \t\t})\n  // \t\tsetConnectFriends(current => [...current, isFriend!]);\n  // \t});\n  // \tsocket.on('logoutToClient', disconnectedListener);\n  // \treturn () => {\n  // \t\tsocket.off('loginToClient', connectedListener);\n  // \t\tsocket.off('logoutToClient', disconnectedListener);\n  // \t};\n  // }, [socket]);\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"Friendsbar\",\n    children: friends.map(friend => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: friend.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Friendsbar, \"QwbMuLO2kqwKmE9hi2K1MX3vzvc=\");\n\n_c = Friendsbar;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Friendsbar\");","map":{"version":3,"names":["React","useEffect","useState","AxiosJwt","Friendsbar","userId","socket","friends","setFriends","axios","get","then","res","data","map","friend","username"],"sources":["/front/src/componants/Friendsbar.tsx"],"sourcesContent":["// Extern:\nimport React from 'react';\nimport { useEffect, useState } from \"react\"\nimport { AxiosResponse } from \"axios\";\nimport { Socket } from 'socket.io-client';\n\n// Intern:\nimport { AxiosJwt } from \"../hooks\";\nimport { IUser } from '../types';\n\n// Assets:\nimport '../styles/components/Friendsbar.css'\n\ntype FriendbarProps = {\n\tuserId: number;\n\tsocket: Socket\n}\n\nexport function Friendsbar({ userId, socket }: FriendbarProps) {\n\tconst [friends, setFriends] = useState<IUser[]>([]);\n\t// const [connectFriends, setConnectFriends] = useState<IUser[]>([])\n\n\tconst axios = AxiosJwt();\n\n\tuseEffect(() => {\n\t\taxios.get('/relation/list_friend')\n\t\t\t.then((res: AxiosResponse<IUser[]>) => { setFriends(res.data) });\n\t}, []);\n\n\t// useEffect(() => {\n\t// \tconst connectedListener = (connectId: number) => {\n\t// \t\tconst isFriend = friends.find(user => {\n\t// \t\t\treturn (user.id === connectId);\n\t// \t\t})\n\t// \t\tsetConnectFriends(current => [...current, isFriend!]);\n\t// \t}\n\n\t// \tconst disconnectedListener = (disconnectId: number) => {\n\t// \t\tconst isFriend = friends.find(user => {\n\t// \t\t\treturn (user.id === disconnectId);\n\t// \t\t})\n\t// \t\tsetConnectFriends((prevMessages) => {\n\t// \t\t\tconst newMessages = { ...prevMessages };\n\t// \t\t\tdelete newMessages[isFriend!.id];\n\t// \t\t\treturn newMessages;\n\t// \t\t});\n\t// \t};\n\n\t// \tsocket.on('loginToClient', (connectId: number) => {\n\t// \t\tconst isFriend = friends.find(user => {\n\t// \t\t\treturn (user.id === connectId);\n\t// \t\t})\n\t// \t\tsetConnectFriends(current => [...current, isFriend!]);\n\t// \t});\n\t\t\n\t// \tsocket.on('logoutToClient', disconnectedListener);\n\n\t// \treturn () => {\n\t// \t\tsocket.off('loginToClient', connectedListener);\n\t// \t\tsocket.off('logoutToClient', disconnectedListener);\n\t// \t};\n\t// }, [socket]);\n\n\treturn (\n\t\t<nav className='Friendsbar'>\n\t\t\t{friends.map((friend: IUser) => (\n\t\t\t\t<div>{friend.username}</div>\n\t\t\t))}\n\t\t</nav>\n\t);\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAIA;AACA,SAASC,QAAT,QAAyB,UAAzB;AAGA;AACA,OAAO,qCAAP;;AAOA,OAAO,SAASC,UAAT,OAAwD;EAAA;;EAAA,IAApC;IAAEC,MAAF;IAAUC;EAAV,CAAoC;EAC9D,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAU,EAAV,CAAtC,CAD8D,CAE9D;;EAEA,MAAMO,KAAK,GAAGN,QAAQ,EAAtB;EAEAF,SAAS,CAAC,MAAM;IACfQ,KAAK,CAACC,GAAN,CAAU,uBAAV,EACEC,IADF,CACQC,GAAD,IAAiC;MAAEJ,UAAU,CAACI,GAAG,CAACC,IAAL,CAAV;IAAsB,CADhE;EAEA,CAHQ,EAGN,EAHM,CAAT,CAN8D,CAW9D;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EACA;EACA;;EAEA,oBACC;IAAK,SAAS,EAAC,YAAf;IAAA,UACEN,OAAO,CAACO,GAAR,CAAaC,MAAD,iBACZ;MAAA,UAAMA,MAAM,CAACC;IAAb;MAAA;MAAA;MAAA;IAAA,QADA;EADF;IAAA;IAAA;IAAA;EAAA,QADD;AAOA;;GApDeZ,U;;KAAAA,U;AAoDf"},"metadata":{},"sourceType":"module"}